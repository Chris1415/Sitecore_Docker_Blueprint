#
# The docker-compose.yml in this solution is a stock Sitecore XP0 environment, without
# any changes. This override represents all the additions/changes needed for this solution.
# Note that some of the overrides point to 'empty' Dockerfiles. This is recommended, even if
# you are not customizing an image, to enable retagging and later customization. See Sitecore
# Containers documentation for details.
#

version: "2.4"

services:

  # A servercore image with both the netcore and netframework SDKs.
  # See Dockerfile for more details.
  dotnetsdk:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-dotnetsdk:${VERSION:-latest}
    build:
      context: ./docker/build/dotnetsdk
    scale: 0

  # The solution build image is added here so it can be referenced as a build dependency
  # for the images which use its output. Setting "scale: 0" means docker-compose will not
  # include it in the running environment. See Dockerfile for more details.
  solution:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-solution:${VERSION:-latest}
    build:
      context: ./
      dockerfile: ./docker/build/solution/Dockerfile
      args:
        BUILD_CONFIGURATION: ${BUILD_CONFIGURATION}
        BUILD_IMAGE: ${REGISTRY}${COMPOSE_PROJECT_NAME}-dotnetsdk:${VERSION:-latest}
    depends_on:
      - dotnetsdk
    scale: 0

  # Mount the Traefik configuration and certs.
  traefik:
    volumes:
      - ./docker/traefik:C:/etc/traefik

  # Mount our SQL data folder and use our custom image with the Headless Services (JSS)
  # module data added. See Dockerfile for details.
  mssql:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-xc0-mssql:${VERSION:-latest}
    build:
      context: ./docker/build/mssql/common
      dockerfile: ../standalone/Dockerfile
      args:
        PARENT_IMAGE: ${XC_NONPRODUCTION_SITECORE_DOCKER_REGISTRY}sitecore-xc0-mssql:${XC_PACKAGES_TAG}
        #PARENT_IMAGE: ${SITECORE_DOCKER_REGISTRY}sitecore-xp0-mssql:${SITECORE_VERSION}
        HEADLESS_SERVICES_IMAGE: ${HEADLESS_SERVICES_IMAGE}
        SITECORE_CORE_DB: ${SITECORE_CORE_DB}
    mem_limit: 2GB
    volumes:
      - type: bind
        source: .\docker\data\sql
        target: c:\data

  # Mount our Solr data folder and use our retagged Solr image.
  # Some modules (like SXA) also require additions to the Solr image.
  solr:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-xc0-solr:${VERSION:-latest}
    build:
      context: ./docker/build/solr
      args:
        PARENT_IMAGE: ${XC_NONPRODUCTION_SITECORE_DOCKER_REGISTRY}sitecore-xc0-solr:${XC_PACKAGES_TAG}
        #PARENT_IMAGE: ${SITECORE_DOCKER_REGISTRY}sitecore-xp0-solr:${SITECORE_VERSION}
        SOLR_COMMERCE_CORE_NAMES: "CatalogItems,Customers,Orders,PriceCards,Promotions"
    mem_limit: 2GB
    volumes:
      - type: bind
        source: .\docker\data\solr
        target: c:\data

  # Use our retagged Identity Server image.
  # Configure for a mounted license file instead of using SITECORE_LICENSE.
  id:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-xc-id:${VERSION:-latest}
    build:
      context: ./docker/build/id
      args:
        PARENT_IMAGE: ${XC_SITECORE_DOCKER_REGISTRY}sitecore-xc-id:${XC_PACKAGES_TAG}
        #PARENT_IMAGE: ${SITECORE_DOCKER_REGISTRY}sitecore-id:${SITECORE_VERSION}
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\license.xml

  # Use our custom CM (XP0 Standalone) image with added modules and solution code.
  # Folders are mounted below for code deployment and log output. See Dockerfile for details.
  # Configure for a mounted license file instead of using SITECORE_LICENSE.
  cm:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-xc0-cm:${VERSION:-latest}
    build:
      context: ./docker/build/cm
      args:
        PARENT_IMAGE: ${XC_SITECORE_DOCKER_REGISTRY}sitecore-xc0-cm:${XC_PACKAGES_TAG}
        #PARENT_IMAGE: ${SITECORE_DOCKER_REGISTRY}sitecore-xp0-cm:${SITECORE_VERSION}
        SOLUTION_IMAGE: ${REGISTRY}${COMPOSE_PROJECT_NAME}-solution:${VERSION:-latest}
        TOOLS_IMAGE: ${TOOLS_IMAGE}
        MANAGEMENT_SERVICES_IMAGE: ${MANAGEMENT_SERVICES_IMAGE}
        HEADLESS_SERVICES_IMAGE: ${HEADLESS_SERVICES_IMAGE}
    depends_on:
      - solution
    volumes:
      - ${LOCAL_DEPLOY_PATH}\sitecore:C:\deploy
      - ${LOCAL_DATA_PATH}\cm:C:\inetpub\wwwroot\App_Data\logs
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\license.xml
    entrypoint: powershell.exe -Command "& C:\tools\entrypoints\iis\Development.ps1"

  # Use our retagged XConnect image.
  # Configure for a mounted license folder instead of using SITECORE_LICENSE.
  # Note: XConnect roles expect a folder with license.xml, not the file itself.
  xconnect:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-xc0-xconnect:${VERSION:-latest}
    build:
      context: ./docker/build/xconnect
      args:
        PARENT_IMAGE: ${XC_SITECORE_DOCKER_REGISTRY}sitecore-xc0-xconnect:${XC_PACKAGES_TAG}
        #PARENT_IMAGE: ${SITECORE_DOCKER_REGISTRY}sitecore-xp0-xconnect:${SITECORE_VERSION}
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment: 
      SITECORE_LICENSE_LOCATION: c:\license\

  # Use our retagged XConnect Search Indexer image.
  # Configure for a mounted license folder instead of using SITECORE_LICENSE.
  xdbsearchworker:
    scale: 0
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-xc0-xdbsearchworker:${VERSION:-latest}
    build:
      context: ./docker/build/xdbsearchworker
      args:
        PARENT_IMAGE: ${XC_SITECORE_DOCKER_REGISTRY}sitecore-xc0-xdbsearchworker:${XC_PACKAGES_TAG}
        #PARENT_IMAGE: ${SITECORE_DOCKER_REGISTRY}sitecore-xp0-xdbsearchworker:${SITECORE_VERSION}
        CONTENT_PATH: wdp/App_Data/jobs/continuous/IndexWorker
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment: 
      SITECORE_LICENSE_LOCATION: c:\license\

  # Use our retagged Marketing Automation Engine image. 
  # Configure for a mounted license folder instead of using SITECORE_LICENSE.
  xdbautomationworker:
    scale: 0
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-xc0-xdbautomationworker:${VERSION:-latest}
    build:
      context: ./docker/build/xdbautomationworker
      args:
        PARENT_IMAGE: ${XC_SITECORE_DOCKER_REGISTRY}sitecore-xc0-xdbautomationworker:${XC_PACKAGES_TAG}
        #PARENT_IMAGE: ${SITECORE_DOCKER_REGISTRY}sitecore-xp0-xdbautomationworker:${SITECORE_VERSION}
        CONTENT_PATH: wdp/App_Data/jobs/continuous/AutomationEngine
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment: 
      SITECORE_LICENSE_LOCATION: c:\license\

  # Use our retagged Cortex Processing Engine image.
  # Configure for a mounted license folder instead of using SITECORE_LICENSE.
  cortexprocessingworker:
    scale: 0
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-xc0-cortexprocessingworker:${VERSION:-latest}
    build:
      context: ./docker/build/cortexprocessingworker
      args:
        PARENT_IMAGE: ${SITECORE_DOCKER_REGISTRY}sitecore-xp0-cortexprocessingworker:${SITECORE_VERSION}
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment: 
      SITECORE_LICENSE_LOCATION: c:\license\
 # bizfx:
 #   build:
 #     context: ./docker/build/bizfx
 #     args:
 #       PARENT_IMAGE: mcr.microsoft.com/windows/servercore/iis:windowsservercore-${OS_IMAGE_TAG}
 #   image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-xc0-bizfx:${VERSION:-latest}
 # engine:
 #   build:
 #     context: ./docker/build/engine
 #     args:
 #       PARENT_IMAGE: mcr.microsoft.com/windows/servercore:${OS_IMAGE_TAG}
 #   image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-xc-engine:${VERSION:-latest}