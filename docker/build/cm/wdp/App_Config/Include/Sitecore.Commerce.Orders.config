<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/">
  <sitecore>
    <!--  Commerce ENTITIES
          Contains all the Commerce order entities.
          The configuration can be used to substitute the default entity implementation with extended one.
    -->
    <commerce.Entities>
      <OrderHeader type="Sitecore.Commerce.Entities.Orders.OrderHeader, Sitecore.Commerce.Connect.Core" />
      <Order type="Sitecore.Commerce.Entities.Orders.Order, Sitecore.Commerce.Connect.Core" />
      <OrderAdjustment type="Sitecore.Commerce.Entities.Carts.CartAdjustment, Sitecore.Commerce.Connect.Core" />
      <OrderLine type="Sitecore.Commerce.Entities.Carts.CartLine, Sitecore.Commerce.Connect.Core" />
      <OrderProduct type="Sitecore.Commerce.Entities.Carts.CartProduct, Sitecore.Commerce.Connect.Core" />
      <OrderOption type="Sitecore.Commerce.Entities.Carts.CartOption, Sitecore.Commerce.Connect.Core" />
      <OrderParty type="Sitecore.Commerce.Entities.Carts.CartParty, Sitecore.Commerce.Connect.Core" />
      <OrderPaymentInfo type="Sitecore.Commerce.Entities.Carts.PaymentInfo, Sitecore.Commerce.Connect.Core" />
      <OrderShippingInfo type="Sitecore.Commerce.Entities.Carts.ShippingInfo, Sitecore.Commerce.Connect.Core" />
    </commerce.Entities>

    <model>
      <elements>
        <element interface="Sitecore.Commerce.Entities.Facets.IOfflineOrders, Sitecore.Commerce.Connect.Core" implementation="Sitecore.Commerce.Entities.Facets.OfflineOrders, Sitecore.Commerce.Connect.Core" />
      </elements>

      <entities>
        <contact>
          <facets>
            <facet name="OfflineOrders" contract="Sitecore.Commerce.Entities.Facets.IOfflineOrders, Sitecore.Commerce.Connect.Core" help="Adds an OfflineOrders facet to a contacts information to allow for syncing of offline orders"/>
          </facets>
        </contact>
      </entities>
    </model>

    <settings>
      <setting name="Commerce.Orders.SynchronizeOrdersTargetDatabase" value="web" />
    </settings>

    <!-- ORDER SERVICE PROVIDER 
         Defines the object which provides core order services.
         Default implementation simply calls corresponding pipelines.
    -->
    <orderServiceProvider type="Sitecore.Commerce.Services.Orders.OrderServiceProvider, Sitecore.Commerce.Connect.Core" singleInstance="true" />

    <pipelines>
      <!--
            SUBMIT VISITOR ORDER
      -->
      <commerce.orders.submitVisitorOrder>
        <!--
          Integration point

          This is where you would add your custom component to save the given cart as an order.

          Setting the Result.Sucess flag will cause for the EA Plan and goal not to trigger.
        -->

        <processor type="Sitecore.Commerce.Pipelines.Orders.Common.TriggerOrderGoal, Sitecore.Commerce.Connect.Core">
          <Name>Visitor Order Created</Name>
          <Text>Visitor order has been created.</Text>
          <SetEngagementValue>true</SetEngagementValue>
        </processor>
        <processor type="Sitecore.Commerce.Pipelines.Orders.TriggerLoyaltyCardPurchasePageEvent, Sitecore.Commerce.Connect.Core">
          <Name>Loyalty Card Purchase</Name>
          <Text>Loyalty card purchase.</Text>
        </processor>
        <processor type="Sitecore.Commerce.Pipelines.Orders.TriggerGiftCardPurchasePageEvent, Sitecore.Commerce.Connect.Core">
          <Name>Gift Card Purchase</Name>
          <Text>Gift card purchase.</Text>
        </processor>
        <processor type="Sitecore.Commerce.Pipelines.Orders.TriggerOrderedProductStockStatusPageEvent, Sitecore.Commerce.Connect.Core">
          <param ref="entityFactory" />
          <Name>Ordered Product Stock Status</Name>
          <Text>Ordered product stock status.</Text>
        </processor>
        <processor type="Sitecore.Commerce.Pipelines.Orders.TriggerOrderOutcome, Sitecore.Commerce.Connect.Core">
          <OutcomeId>{9016E456-95CB-42E9-AD58-997D6D77AE83}</OutcomeId>
        </processor>

        <!--
          AbandonCurrentSession processor: The processor will get execute after every order
          is placed to ensure the interaction is flushed to Xb collection by abandoned the session.
          The main purpose will be to be able to get the recommended products based on the last placed order
          right after placing the order (it may take short period of time to process the session before we get the recommended products)
          without this processor the recommended products will show only after the session timeout/end or when the user sign out and login again

          There is a downside to use this processor in a same visit there will more session created and
          more interaction will be saved in Xdbcollection
        -->

        <!--<processor type="Sitecore.Commerce.Pipelines.Orders.AbandonCurrentSession, Sitecore.Commerce.Connect.Core">
        </processor>-->

      </commerce.orders.submitVisitorOrder>

      <commerce.orders.getVisitorOrder>
        <!--
          Integration point

          This is where you would add your custom component to return the specific visitor order.

          Setting the Result.Sucess flag will cause for the page event not to trigger.
        -->

        <processor type="Sitecore.Commerce.Pipelines.Orders.GetVisitorOrder.TriggerVisitorViewedOrderDetailsPageEvent, Sitecore.Commerce.Connect.Core">
          <Name>Visitor Viewed Order Details</Name>
          <Text>Visitor has viewed the details of an order.</Text>
        </processor>
      </commerce.orders.getVisitorOrder>

      <commerce.orders.getVisitorOrders>
        <!--
          Integration point

          This is where you would add your custom component to return the visitor order list.

          Setting the Result.Sucess flag will cause for the page event not to trigger.
        -->

        <processor type="Sitecore.Commerce.Pipelines.Orders.GetVisitorOrders.TriggerVisitorViewedOrderHistoryPageEvent, Sitecore.Commerce.Connect.Core">
          <Name>Visitor Viewed Order History</Name>
          <Text>Visitor has viewed the order history.</Text>
        </processor>
      </commerce.orders.getVisitorOrders>

      <commerce.orders.visitorCancelOrder>
        <!--
          Integration point

          This is where you would add your custom component to cancel the given order.

          Setting the Result.Sucess flag will cause for the page event not to trigger.
        -->

        <processor type="Sitecore.Commerce.Pipelines.Orders.VisitorCancelOrder.TriggerVisitorCancelOrderPageEvent, Sitecore.Commerce.Connect.Core">
          <Name>Visitor Cancel Order</Name>
          <Text>Visitor has canceled an order.</Text>
        </processor>
      </commerce.orders.visitorCancelOrder>

      <commerce.orders.getAvailableCountries>
        <!--
          Integration point

          This is where you would add your custom component to return the available countries.

        -->

        <processor type="Sitecore.Commerce.Pipelines.Orders.GetAvailableCountries, Sitecore.Commerce.Connect.Core">
        </processor>
      </commerce.orders.getAvailableCountries>

      <commerce.orders.getAvailableRegions>
        <!--
          Integration point

          This is where you would add your custom component to return the available regions.

        -->

        <processor type="Sitecore.Commerce.Pipelines.Orders.GetAvailableRegions, Sitecore.Commerce.Connect.Core">
        </processor>
      </commerce.orders.getAvailableRegions>

      <!--  Order status changed event -->
      <commerce.orders.orderStatusChanged>
        <processor type="Sitecore.Commerce.Pipelines.Orders.OrderStatusChanged.TriggerOrderStatusChangedPageEvent, Sitecore.Commerce.Connect.Core">
          <Name>Order status changed</Name>
          <Text>Order status changed.</Text>
        </processor>
      </commerce.orders.orderStatusChanged>

      <!--  SYNCHRONIZE OFFLINE ORDERS
            This pipeline is used to synchronize offline orders (such as in-store orders) with the Sitecore xDB analytics system.
      -->
      <commerce.orders.synchronizeOfflineOrders>

        <!--
          The CancelIfPreviewEditorOrExplorerMode processor is responsible for checking the current mode and setting the Result.Success flag
          to false if any of the following are true:
            Preview or Editor mode
            Explorer mode
          If any of the modes are enabled then the Success flag is set to false and a system message is added to indicate why
        -->
        <processor type="Sitecore.Commerce.Pipelines.Orders.SynchronizeOfflineOrders.CancelIfPreviewEditorOrExplorerMode, Sitecore.Commerce.Connect.Core">
          <param ref="entityFactory" />
        </processor>

        <!--
          The ExtractOfflineOrderDateFromXDb processor is responsible for reading the facet data of a contact and populating the LastOrderSynchronizedDate
          and LastOrderSynchronizedId property of the SynchronizeOfflineOrdersContext. The value is retrieved from the contact identified by the UserId 
          property of the request. If xDB is not enabled, no action is taken.
        -->
        <processor type="Sitecore.Commerce.Pipelines.Orders.SynchronizeOfflineOrders.ExtractOfflineOrderDateFromXDb, Sitecore.Commerce.Connect.Core">
          <param ref="entityFactory" />
        </processor>

        <!--
          Integration point

          This is where you would add your custom component to retreive the list of offline orders from the external commerce system.
          
          Get the list of offline orders from the external system and create a new Order entity for each one.  Make sure to set the 
          isOfflineOrder property to true for each Order.
          
          Update the list of orders in the SynchronizeOfflineOrdersContext with the newly retrieved orders to be processed by the following processors.

          Setting the Result.Sucess flag to false will cause for rest of the processors to do nothing.
        -->
        
        
        <!--
          The SynchronizeOrders processor is responsible for synchronizing the offline orders found in the SynchronizeOfflineOrdersContext of the 
          request with xDB.  This processor assumes that a previous processor has populated the list of orders.  If the list is empty no sync will occur.
        -->
        <processor type="Sitecore.Commerce.Pipelines.Orders.SynchronizeOfflineOrders.SynchronizeOrders, Sitecore.Commerce.Connect.Core">
          <param ref="entityFactory" />
        </processor>
        
        <!--
          The TriggerOfflineOrdersSynchronizedPageEvent processor is responsible for triggering a page event when offline orders have been synchronized
        -->
        <processor type="Sitecore.Commerce.Pipelines.Orders.SynchronizeOfflineOrders.TriggerOfflineOrdersSynchronizedPageEvent, Sitecore.Commerce.Connect.Core">
          <Name>Offline Orders Synchronized</Name>
          <Text>Offline orders have been synchronized for a user</Text>
          <param ref="entityFactory" />
        </processor>

        <!-- 
          The UpdateLastSyncInfo processor is responsible for updating the facet on the contact with a new date and order ID of the last offline 
          order that was processed.
        -->
        <processor type="Sitecore.Commerce.Pipelines.Orders.SynchronizeOfflineOrders.UpdateLastSyncInfo, Sitecore.Commerce.Connect.Core">
          <param ref="entityFactory" />
        </processor>
      </commerce.orders.synchronizeOfflineOrders>

      <commerce.orders.reorder>
        <!--
          The processor that loads the order from the commerce system that is the source of the reorder request.
          This processor calls the commerce.orders.getVisitorOrder pipeline to load the order.
        -->
        <processor type="Sitecore.Commerce.Pipelines.Orders.Reorder.GetReorderSource, Sitecore.Commerce.Connect.Core" />

        <!--
          The processor that loads the cart from the commerce system that is the target of the reorder request.
          This processor calls the commerce.carts.createOrResumeCart pipeline to load the cart.
        -->
        <processor type="Sitecore.Commerce.Pipelines.Orders.Reorder.GetReorderCart, Sitecore.Commerce.Connect.Core" />

        <!--
          The processor that adds the requested order lines to the customer's current cart.
          This processor calls the commerce.carts.addCartLines pipeline to add the requested reorder items.
        -->
        <processor type="Sitecore.Commerce.Pipelines.Orders.Reorder.AddReorderLinesToCart, Sitecore.Commerce.Connect.Core" />

        <!--
          The processor that adds parties associated with the reorder lines to the customer's current cart.
          This processor calls the commerce.carts.addParties pipeline to add the requested reorder parties.
        -->
        <processor type="Sitecore.Commerce.Pipelines.Orders.Reorder.AddReorderPartiesToCart, Sitecore.Commerce.Connect.Core" />

        <!--
          The processor that adds shipping info for a reorder to the custommer's current cart.
          This processor calls the commerce.carts.createOrResumeCart pipeline to refresh the customer cart.
          This processor calls the commerce.carts.addShippingInfo pipelines to add the requested reorder shipping info.
        -->
        <processor type="Sitecore.Commerce.Pipelines.Orders.Reorder.AddReorderShippingInfoToCart, Sitecore.Commerce.Connect.Core">
          <param ref="entityFactory" />
        </processor>

        <!--
          The processor that raises the "Reorder Requested" page event if the reorder item was successfully added to the custommer's cart.
        -->
        <processor type="Sitecore.Commerce.Pipelines.Orders.Reorder.TriggerReorderRequestedPageEvent, Sitecore.Commerce.Connect.Core">
          <Name>Reorder Requested</Name>
          <Text>A customer has requested to reorder an item.</Text>
        </processor>
      </commerce.orders.reorder>

    </pipelines>

  </sitecore>
</configuration>
