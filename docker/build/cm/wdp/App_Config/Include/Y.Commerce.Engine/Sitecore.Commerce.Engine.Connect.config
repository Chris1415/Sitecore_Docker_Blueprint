<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/" xmlns:role="http://www.sitecore.net/xmlconfig/role/">
  <sitecore role:require="Standalone or ContentDelivery or ContentManagement">
    <commerceEngineConfiguration type="Sitecore.Commerce.Engine.Connect.CommerceEngineConfiguration, Sitecore.Commerce.Engine.Connect">
      <shopsServiceUrl>https://localhost:5000/api/</shopsServiceUrl>
      <commerceOpsServiceUrl>https://localhost:5000/commerceops/</commerceOpsServiceUrl>
      <commerceMinionsServiceUrl>https://localhost:5000/commerceops/</commerceMinionsServiceUrl>
      <sitecoreIdentityServerUrl>https://sxastorefront-identityserver/</sitecoreIdentityServerUrl>
      <commerceEngineConnectClientId>CommerceEngineConnect</commerceEngineConnectClientId>
      <clientSecretHash>K7gNU3sdo+OL0wNhqoVWhr3g6s1xYv72ol/pe/Unols=</clientSecretHash>
      <commerceRequestTimeout>210</commerceRequestTimeout>
      <enforceSsl>true</enforceSsl>
      <defaultEnvironment>HabitatAuthoring</defaultEnvironment>
      <defaultMinionsEnvironment>HabitatMinions</defaultMinionsEnvironment>
      <defaultShopName>CommerceEngineDefaultStorefront</defaultShopName>
      <defaultShopCurrency>USD</defaultShopCurrency>
     
      <!-- Catalog Template Generator Settings -->
      <useDeterministicFieldIdsForEntities>true</useDeterministicFieldIdsForEntities>
      <useDeterministicFieldIdsForComponents>true</useDeterministicFieldIdsForComponents>

      <!-- Environment Settings -->
      <defaultAuthoringDatabase>master</defaultAuthoringDatabase>

      <!-- Indexing Settings (in ms) -->
      <fullIndexWaitTime>1000</fullIndexWaitTime>
      <incrementalIndexWaitTime>100</incrementalIndexWaitTime>

      <!-- Threshold that triggers a full cache refresh after incremental indexing -->
      <fullCacheRefreshThreshold>20</fullCacheRefreshThreshold>

      <!-- Specifies the batch size for the GetCatalogMappingsForIds request -->
      <getCatalogMappingsForIdsBatchSize>20</getCatalogMappingsForIdsBatchSize>
    </commerceEngineConfiguration>
    <commerceCachingConfiguration type="Sitecore.Commerce.Engine.Connect.CommerceCachingConfiguration,Sitecore.Commerce.Engine.Connect.Caching">
      <!-- Cache Settings -->
      <cachingSettings type="Sitecore.Commerce.Engine.Connect.CachingSettings, Sitecore.Commerce.Engine.Connect.Caching">
        <redis type="Sitecore.Commerce.Engine.Connect.RedisCacheSettings, Sitecore.Commerce.Engine.Connect.Caching">
          <enabled>true</enabled>
          <cacheStoreName>Commerce-Connector-Redis</cacheStoreName>
          <options type="Microsoft.Extensions.Caching.Redis.RedisCacheOptions, Microsoft.Extensions.Caching.Redis">
            <configuration>localhost,defaultDatabase=1,allowAdmin=true,syncTimeout=3600000</configuration>
            <instanceName>Redis</instanceName>
          </options>
        </redis>
        <memory type="Sitecore.Commerce.Engine.Connect.MemoryCacheSettings, Sitecore.Commerce.Engine.Connect.Caching">
          <enabled>false</enabled>
          <cacheStoreName>Commerce-Connector-Memory</cacheStoreName>
        </memory>
        <cacheEntry type="Sitecore.Commerce.Engine.Connect.CacheEntrySettings, Sitecore.Commerce.Engine.Connect.Caching">
          <cacheName>CommerceConnect</cacheName>
          <expiration>21600000</expiration>
        </cacheEntry>
      </cachingSettings>
    </commerceCachingConfiguration>
    <commands>
      <command name="commerce:generatecatalogdatatemplates" type="Sitecore.Commerce.Engine.Connect.DataProvider.Commands.GenerateTemplatesCommand, Sitecore.Commerce.Engine.Connect" />
      <command name="commerce:deletecatalogdatatemplates" type="Sitecore.Commerce.Engine.Connect.DataProvider.Commands.DeleteTemplatesCommand, Sitecore.Commerce.Engine.Connect" />
      <command name="commerce:refreshcache" type="Sitecore.Commerce.Engine.Connect.DataProvider.Commands.RefreshCacheCommand, Sitecore.Commerce.Engine.Connect" />
    </commands>
    <pipelines>
      <commerce.viewaction.getentityview>
        <processor type="Sitecore.Commerce.Engine.Connect.Pipelines.ViewAction.GetEntityView, Sitecore.Commerce.Engine.Connect" />
      </commerce.viewaction.getentityview>
      <commerce.viewaction.doaction>
        <processor type="Sitecore.Commerce.Engine.Connect.Pipelines.ViewAction.DoAction, Sitecore.Commerce.Engine.Connect" />
      </commerce.viewaction.doaction>
      <getContentEditorFields>
        <processor type="Sitecore.Commerce.Engine.Connect.SitecoreDataProvider.Pipelines.ContentEditor.CommerceContentEditorFieldsProcessor, Sitecore.Commerce.Engine.Connect" />
      </getContentEditorFields>
      <renderContentEditor>
        <processor patch:before="processor[1]" type="Sitecore.Commerce.Engine.Connect.DataProvider.Pipelines.SetCommerceEditorFormatter, Sitecore.Commerce.Engine.Connect" />
      </renderContentEditor>
      <getQueryState>
        <processor type="Sitecore.Commerce.Engine.Connect.DataProvider.Pipelines.ContentEditor.CommandStateProcessor, Sitecore.Commerce.Engine.Connect" />
      </getQueryState>
      <getContentEditorWarnings>
        <processor type="Sitecore.Commerce.Engine.Connect.Pipelines.ValidateToken, Sitecore.Commerce.Engine.Connect" />
      </getContentEditorWarnings>
      <getItemPersonalizationVisibility>
        <processor type="Sitecore.Commerce.Engine.Connect.Pipelines.PersonalizationVisibilityProcessor, Sitecore.Commerce.Engine.Connect" />
      </getItemPersonalizationVisibility>
    </pipelines>
    <events>
      <event name="publish:itemProcessing">
        <handler type="Sitecore.Commerce.Engine.Connect.Events.CatalogPublishingExcluderEvent, Sitecore.Commerce.Engine.Connect" method="CheckProcessing" />
      </event>
      <event name="publish:end">
        <handler patch:after="processor[@type='Sitecore.Publishing.HtmlCacheClearer, Sitecore.Kernel']" type="Sitecore.Commerce.Engine.Connect.Events.CommercePublishCacheRefresh, Sitecore.Commerce.Engine.Connect" method="ClearCache" />
      </event>
      <event name="publish:end:remote">
        <handler patch:after="processor[@type='Sitecore.Publishing.HtmlCacheClearer, Sitecore.Kernel']" type="Sitecore.Commerce.Engine.Connect.Events.CommercePublishCacheRefresh, Sitecore.Commerce.Engine.Connect" method="ClearCache" />
      </event>
      <event name="item:saved">
        <handler type="Sitecore.Commerce.Engine.Connect.Events.CommerceItemEventHandler, Sitecore.Commerce.Engine.Connect" method="OnItemSaved" />
      </event>
      <event name="item:deleting">
        <handler type="Sitecore.Commerce.Engine.Connect.Events.CommerceItemEventHandler, Sitecore.Commerce.Engine.Connect" method="OnItemDeleting" />
      </event>
      <event name="indexing:completed:remote" role:require="Standalone or ContentManagement or ContentDelivery">
        <handler type="Sitecore.Commerce.Engine.Connect.Events.IndexingCompletedEventHandler, Sitecore.Commerce.Engine.Connect" method="OnIndexingCompleted" />
      </event>
    </events>
    <hooks role:require="Standalone or ContentDelivery">
      <hook type="Sitecore.Commerce.Engine.Connect.Events.IndexingCompletedHook, Sitecore.Commerce.Engine.Connect" />
    </hooks>
    <settings>
      <setting name="Sitecore.Services.SecurityPolicy">
        <patch:attribute name="value">Sitecore.Services.Infrastructure.Web.Http.Security.ServicesOnPolicy, Sitecore.Services.Infrastructure</patch:attribute>
      </setting>
    </settings>
    <services>
      <configurator type="Sitecore.Commerce.Engine.Connect.CachingConfigurator, Sitecore.Commerce.Engine.Connect.Caching" />
    </services>
  </sitecore>
</configuration>
